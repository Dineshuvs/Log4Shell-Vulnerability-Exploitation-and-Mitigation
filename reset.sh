#!/bin/bash

# Removing docker images
docker rmi -f $(docker images -q)
docker image prune -a -f
# Define the Dockerfile path
DOCKERFILE_PATH="./Dockerfile"

# Define the line number to remove
LINE_NUMBER=6

# Define the line to search for
SEARCH_LINE="ENV LOG4J_FORMAT_MSG_NO_LOOKUPS=true"

# Use grep to search for the line in the Dockerfile
if grep -q "$SEARCH_LINE" "$DOCKERFILE_PATH"; then
  # Use sed to remove the line from the Dockerfile
  sed -i "${LINE_NUMBER}d" "$DOCKERFILE_PATH"
  echo "The line '$SEARCH_LINE' is present in the Dockerfile and has been removed."
else
  echo "The line '$SEARCH_LINE' is not present in the Dockerfile."
fi

# Change directory to the vulnerable application
cd vulnerable-application/

# Resetting mitigation 1 in pom.xml
# Specify the path to the file
file_path="./pom.xml"
# Define the search and replace strings
search_string="<version>2.17.0</version>"
replace_string="<version>2.14.1</version>"
# Use sed to perform the replacement
sed -i "s|$search_string|$replace_string|g" "$file_path"
echo "Mitigation reset: pom.xml version changed back to 2.14.1"

# Specify the path to the file
file_path="./src/main/webapp/WEB-INF/web.xml"

# Define the search and replace strings
search_string="<servlet-class>com.example.log4shell.LoginServlet_withHardening</servlet-class>"
replace_string="<servlet-class>com.example.log4shell.LoginServlet</servlet-class>"

# Use sed to perform the replacement
sed -i "s|$search_string|$replace_string|g" "$file_path"

# Building the application
mvn clean package
chmod 777 ./target/*.war
cd ..
# Move the resulting .war file to the target directory
mv ./vulnerable-application/target/*.war ./target/*.war

echo "Build complete"

# Build the Docker image
docker build -t log4-shell-exploitable .

echo "Exploit image built."
